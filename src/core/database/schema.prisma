// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMINISTRATOR
  MEMBER
  GUEST
}

enum RoomPriceType {
  STANDARD
  PROMOTION
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false) @map("email_verified")
  image         String?
  role          Role      @default(GUEST)
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map(name: "users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map(name: "sessions")
}

model Account {
  id                    String    @id @default(uuid())
  userId                String    @map("user_id")
  User                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?   @map("scope")
  idToken               String?   @map("id_token")
  password              String?   @map("password")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@map(name: "accounts")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String   @map("identifier")
  value      String   @map("value")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map(name: "verifications")
}

model RoomType {
  id          String      @id @default(uuid())
  name        String
  code        String      @unique
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  rooms       Room[]
  prices      RoomPrice[]

  @@map(name: "room_types")
}

model Room {
  id         String   @id @default(uuid())
  name       String   @unique
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  roomTypeId String   @map("room_type_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map(name: "rooms")
}

model RoomPrice {
  id            String        @id @default(uuid())
  weekday       Int
  weekend       Int
  priceType     RoomPriceType @map("price_type")
  promotionName String?       @map("promotion_name")
  roomType      RoomType      @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  roomTypeId    String        @map("room_type_id")
  effectiveFrom DateTime      @map("effective_from")
  effectiveTo   DateTime?     @map("effective_to")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map(name: "room_prices")
}
